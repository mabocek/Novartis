using System;
using System.Collections.Generic;
using BocekMatous.Component.Data;
using BocekMatous.Component.Grid.Columns;
using BocekMatous.Component.Parameters;
using BocekMatous.Component.Popup;
using JetBrains.Annotations;

namespace BocekMatous.Component.Grid.OuterCommands
{
    public interface IOuterCommand<TRow> where TRow : class
    {
        #region Properties

        string ActionName { get; }
        IAjaxCallOptions AjaxCallOptions { get; }
        EnumCommandType CommandType { get; }
        string ControllerName { get; }
        string JavascriptCallValue { get; }
        string JavascriptOnPopupClose { get; }
        EnumLinkType LinkType { get; }
        bool OpenInNewWindow { get; }
        CommandOptions Options { get; }
        IEnumerable<IParameter> Parameters { get; }
        PopupOptions PopupOptions { get; }
        bool ReloadGridAfterExecution { get; }
        bool ReloadGridAfterPopupCancelClose { get; }
        string Url { get; }
        bool UsePopup { get; }

        #endregion

        #region Public Methods

        IOuterCommand<TRow> ActionLink(
            [AspMvcAction] string actionName,
            Action<IParameterBuilder<TRow>> parameterBuilder);

        IOuterCommand<TRow> ActionLink(
            [AspMvcAction] string actionName,
            [AspMvcController] string controllerName,
            Action<IParameterBuilder<TRow>> parameterBuilder);

        IOuterCommand<TRow> ActionLink(
            [AspMvcAction] string actionName,
            [AspMvcController] string controllerName);

        IAjaxCallOptions AjaxCall(
            [AspMvcAction] string actionName,
            Action<IParameterBuilder<TRow>> parameterBuilder,
            bool reloadGridAfterExecution = false);

        IAjaxCallOptions AjaxCall(
            [AspMvcAction] string actionName,
            [AspMvcController] string controllerName,
            Action<IParameterBuilder<TRow>> parameterBuilder,
            bool reloadGridAfterExecution = false);

        IAjaxCallOptions AjaxCall(
            [AspMvcAction] string actionName,
            [AspMvcController] string controllerName,
            bool reloadGridAfterExecution = false);

        IOuterCommand<TRow> DisabledIf(bool value);

        /// <summary>
        ///     Popup for outer controls of Grid - AJAX loaded popup
        /// </summary>
        /// <param name="popupActionName">Name of GET action with content of popup</param>
        /// <param name="popupControllerName">Name of controller with content of popup</param>
        /// <param name="popupParameters">Parameters for GET action</param>
        /// <param name="popupSubmitActionName">Name of POST action where should be popup form submited</param>
        /// <param name="popupSubmitControllerName">Name of controller where should be popup form submited</param>
        /// <param name="title">Title of popup</param>
        /// <param name="modalSize">Size of popup</param>
        /// <param name="modalButtons">Defines which buttons should be rendered</param>
        /// <param name="popupId">If popup shoudn't be generated by grid, provide element id of your Popup</param>
        /// <param name="reloadOnSuccess">Reloads grid after success confirm on popup</param>
        /// <param name="reloadOnCancelClose">Reloads grid after cancel closing popup</param>
        /// <param name="javascriptOnClose">Javascript function called on popup close</param>
        /// <returns>IColumnCommand{TRow}.</returns>
        IOuterCommand<TRow> DisplayPopup(
            [AspMvcAction] string popupActionName,
            [AspMvcController] string popupControllerName,
            Action<IParameterBuilder<TRow>> popupParameters,
            [AspMvcAction] string popupSubmitActionName,
            [AspMvcController] string popupSubmitControllerName,
            string title,
            ModalSize modalSize = ModalSize.Small,
            ModalButtons modalButtons = ModalButtons.OkCancel,
            string popupId = null,
            bool reloadOnSuccess = true,
            bool reloadOnCancelClose = false,
            string javascriptOnClose = "");

        /// <summary>
        ///     Popup for actions on Grid - static text popup
        /// </summary>
        /// <param name="text">Text of popup</param>
        /// <param name="title">Title of popup</param>
        /// <param name="modalSize">Size of popup</param>
        /// <param name="modalButtons">Defines which buttons should be rendered</param>
        /// <param name="popupId">If popup shoudn't be generated by grid, provide element id of your Popup</param>
        /// <param name="reloadOnSuccess">Reloads grid after success confirm on popup</param>
        /// <param name="reloadOnCancelClose">Reloads grid after cancel closing popup</param>
        /// <param name="javascriptOnClose">Javascript function called on popup close</param>
        /// <returns>IColumnCommand{TRow}.</returns>
        IOuterCommand<TRow> DisplayPopupConfirmation(
            string text,
            string title,
            ModalSize modalSize = ModalSize.Small,
            ModalButtons modalButtons = ModalButtons.OkCancel,
            string popupId = null,
            bool reloadOnSuccess = true,
            bool reloadOnCancelClose = false,
            string javascriptOnClose = "");

        IOuterCommand<TRow> ExternalLink(
            string url,
            bool openInCurrentWindow = false);

        IOuterCommand<TRow> ExternalLink(
            string url,
            Action<IParameterBuilder<TRow>> parameterBuilder,
            bool openInCurrentWindow = false);

        /// <summary>
        ///     Icon for action.
        /// </summary>
        /// <param name="cssIcon">css class for normal icon</param>
        /// <param name="disabledCssIcon">css class for disabled icon</param>
        IOuterCommand<TRow> Icon(string cssIcon, string disabledCssIcon = "");

        IOuterCommand<TRow> JavascriptCall(string callback);
        IOuterCommand<TRow> JavascriptCall(string callback, Action<IParameterBuilder<TRow>> parameterBuilder);
        IOuterCommand<TRow> Text(string title);

        #endregion

        ///// <summary>
        /////     Renders command above grid
        ///// </summary>
        ///// <param name="renderUnderGrid">is rendered under grid</param>
        ///// <returns></returns>
        //IOuterCommand<TRow> UnderGrid(bool renderUnderGrid = true);
    }
}