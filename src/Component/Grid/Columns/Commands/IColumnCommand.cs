using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using BocekMatous.Component.Data;
using BocekMatous.Component.Parameters;
using BocekMatous.Component.Popup;
using JetBrains.Annotations;

namespace BocekMatous.Component.Grid.Columns.Commands
{
    /// <summary>
    ///     columnCommand on Grid
    /// </summary>
    /// <typeparam name="TRow"></typeparam>
    public interface IColumnCommand<TRow> where TRow : class
    {
        #region Properties

        string ActionName { get; }
        IAjaxCallOptions AjaxCallOptions { get; }
        EnumCommandType CommandType { get; }
        string ControllerName { get; }
        //string DisabledIfPopupNotificationText { get; }
        //string DisabledIfPopupNotificationTitle { get; }
        string JavascriptCallValue { get; }
        string JavascriptOnPopupClose { get; }
        EnumLinkType LinkType { get; }
        bool OpenInNewWindow { get; }
        CommandOptions Options { get; }
        IEnumerable<IParameter> Parameters { get; }
        PopupOptions<TRow> PopupOptions { get; }
        bool ReloadGridAfterExecution { get; }
        bool ReloadGridAfterPopupCancelClose { get; }
        string Url { get; }
        bool UsePopup { get; }

        #endregion

        #region Public Methods

        IColumnCommand<TRow> ActionLink(
            [AspMvcAction] string actionName,
            Action<IParameterRowBuilder<TRow>> parameterBuilder);

        IColumnCommand<TRow> ActionLink(
            [AspMvcAction] string actionName,
            [AspMvcController] string controllerName,
            Action<IParameterRowBuilder<TRow>> parameterBuilder);

        IColumnCommand<TRow> ActionLink(
            [AspMvcAction] string actionName,
            [AspMvcController] string controllerName);

        IAjaxCallOptions AjaxCall(
            [AspMvcAction] string actionName,
            Action<IParameterRowBuilder<TRow>> parameterBuilder,
            bool reloadGridAfterExecution = false);

        IAjaxCallOptions AjaxCall(
            [AspMvcAction] string actionName,
            [AspMvcController] string controllerName,
            Action<IParameterRowBuilder<TRow>> parameterBuilder,
            bool reloadGridAfterExecution = false);

        IAjaxCallOptions AjaxCall(
            [AspMvcAction] string actionName,
            [AspMvcController] string controllerName,
            bool reloadGridAfterExecution = false);

        IColumnCommand<TRow> DisabledIf<TProperty>(Expression<Func<TRow, TProperty>> propertyExpression);

        IColumnCommand<TRow> DisabledIf(bool value);

        IColumnCommand<TRow> IconIf<TProperty>(Expression<Func<TRow, TProperty>> propertyExpression);

        IColumnCommand<TRow> IconIf(bool value);
        //IColumnCommand<TRow> DisabledIfPopupNotification<TProperty>(Expression<Func<TRow, TProperty>> propertyExpression, string title, string text);

        //IColumnCommand<TRow> DisabledIfPopupNotification(bool value, string title, string text);

        /// <summary>
        ///     Popup for actions on Grid - AJAX loaded popup
        /// </summary>
        /// <param name="popupActionName">Name of GET action with content of popup</param>
        /// <param name="popupControllerName">Name of controller with content of popup</param>
        /// <param name="popupParameters">Parameters for GET action</param>
        /// <param name="popupSubmitActionName">Name of POST action where should be popup form submited</param>
        /// <param name="popupSubmitControllerName">Name of controller where should be popup form submited</param>
        /// <param name="title">Title of popup</param>
        /// <param name="modalSize">Size of popup</param>
        /// <param name="modalButtons">Defines which buttons should be rendered</param>
        /// <param name="popupId">If popup shoudn't be generated by grid, provide element id of your Popup</param>
        /// <param name="reloadOnSuccess">Reloads grid after success confirm on popup</param>
        /// <param name="reloadOnCancelClose">Reloads grid after cancel closing popup</param>
        /// <param name="javascriptOnClose">Javascript function called on popup close</param>
        /// <returns>IColumnCommand{TRow}.</returns>
        IColumnCommand<TRow> DisplayPopup(
            [AspMvcAction] string popupActionName,
            [AspMvcController] string popupControllerName,
            Action<IParameterRowBuilder<TRow>> popupParameters,
            [AspMvcAction] string popupSubmitActionName,
            [AspMvcController] string popupSubmitControllerName,
            string title,
            ModalSize modalSize = ModalSize.Small,
            ModalButtons modalButtons = ModalButtons.OkCancel,
            string popupId = null,
            bool reloadOnSuccess = true,
            bool reloadOnCancelClose = false,
            string javascriptOnClose = "");

        /// <summary>
        ///     Popup for actions on Grid - static text popup
        /// </summary>
        /// <param name="text">Text of popup</param>
        /// <param name="title">Title of popup</param>
        /// <param name="modalSize">Size of popup</param>
        /// <param name="modalButtons">Defines which buttons should be rendered</param>
        /// <param name="popupId">If popup shoudn't be generated by grid, provide element id of your Popup</param>
        /// <param name="reloadOnSuccess">Reloads grid after success confirm on popup</param>
        /// <param name="reloadOnCancelClose">Reloads grid after cancel closing popup</param>
        /// <param name="javascriptOnClose">Javascript function called on popup close</param>
        /// <returns>IColumnCommand{TRow}.</returns>
        IColumnCommand<TRow> DisplayPopupConfirmation(
            string text,
            string title,
            ModalSize modalSize = ModalSize.Small,
            ModalButtons modalButtons = ModalButtons.OkCancel,
            string popupId = null,
            bool reloadOnSuccess = true,
            bool reloadOnCancelClose = false,
            string javascriptOnClose = "");

        IColumnCommand<TRow> ExternalLink(
            string url,
            bool openInCurrentWindow = false);

        IColumnCommand<TRow> ExternalLink(
            string url,
            Action<IParameterRowBuilder<TRow>> parameterBuilder,
            bool openInCurrentWindow = false);

        /// <summary>
        ///     Icon for action.
        /// </summary>
        /// <param name="cssIcon">css class for normal icon</param>
        /// <param name="disabledCssIcon">css class for disabled icon</param>
        IColumnCommand<TRow> Icon(string cssIcon, string disabledCssIcon = "");

        IColumnCommand<TRow> JavascriptCall(string callback);

        IColumnCommand<TRow> JavascriptCall(string callback, Action<IParameterRowBuilder<TRow>> parameterBuilder);
        IColumnCommand<TRow> Title(string title);

        #endregion
    }
}